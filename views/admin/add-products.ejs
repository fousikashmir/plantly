
<%- include('../partials/admin/header.ejs') %>

<div class="clearfix"></div>

    <div class="content-wrapper">
        <div class="container-fluid">

            <div class="row mt-3">
                <div class="col-lg-6">
                    <div class="card" style="margin-top: 60px; margin-left: 60px;">
                        <div class="card-body">
                            <div class="card-title">ADD NEW PRODUCT</div>
                            <hr>
                            <form method="post"  id="productForm"  enctype="multipart/form-data">
                             
                                <div class="form-group">
                                    <label for="input-1">Product Name</label>
                                    <input type="text" name="name" class="form-control" required id="input-1"
                                        placeholder="Enter product name">
                                </div>

                                <div class="form-group">
                                  <label for="input-1">Price</label>
                                  <input type="number" name="price" required class="form-control" id="price" placeholder="Enter price" oninput="validatePriceInput(this)">
                                  <div class="d-none" id="price_error" style="color: red;"></div>
                                  <div class="d-none" id="negative_price_warning" style="color: red;"></div>
                              </div>

                                


                                <div class="form-group">
                                    <label for="input-1">Description</label>
                                    <input type="text" name="description" required class="form-control" id="input-1"
                                        placeholder="Give description about the product">
                                </div>

                                <div class="form-group">
                                  <label for="input-1">Select category</label>
                                  <select name="category" style="background-color:rgb(58,133,169);"
                                      class="form-select" id="input-1"
                                      aria-label="Floating label select example">
                                      <% if(categoryData.length> 0) {
                                          for(let i=0; i < categoryData.length; i++) { %>
                                              <option value="<%= categoryData[i].name %>"
                                                  style="background-color:rgb(58,133,169);">
                                                  <%= categoryData[i].name %>
                                              </option>
                                              <% } } %>
                                  </select>

                              </div>

                                <div id="preview"></div>
                                <div class="form-group">
                                    <label for="input-1">Image</label>
                                    <input type="file" multiple required name="image" required class="form-control" id="input-1">
                                </div>



                                <div class="form-group">
                                  <label for="input-1">Enter stock </label>
                                  <input type="number" name="stock" required class="form-control" id="input-1" placeholder="Enter stock">
                                  <div class="d-none" id="stock_error" style="color: red;"></div>
                                  <div class="d-none" id="negative_stock_warning" style="color: red;"></div>
                              </div>
                                

                                <div class="form-group">
                                    <button type="submit" class="btn btn-light px-5"><i class="icon-lock"></i>
                                        ADD</button>
                                </div>
                            </form>
                            
                            <script>
                              function validateForm() {
                                  const priceInput = document.querySelector('input[name="price"]');
                                  const stockInput = document.querySelector('input[name="stock"]');
                          
                                  const isPriceValid = validatePriceInput(priceInput);
                                  const isStockValid = validateStockInput(stockInput);
                          
                                  if (isPriceValid && isStockValid) {
                                      // Submit the form if both price and stock are valid
                                      document.getElementById('productForm').submit();
                                  }
                              }
                          
                              function validatePriceInput(input) {
                                  const value = parseFloat(input.value);
                                  const priceError = document.getElementById('price_error');
                          
                                  if (input.value === "") {
                                      priceError.classList.add("d-none");
                                      priceError.innerText = "";
                                      return false;
                                  }
                          
                                  if (!isNaN(value) && value >= 0) {
                                      priceError.classList.add("d-none");
                                      priceError.innerText = "";
                                      return true;
                                  } else if (value < 0) {
                                      priceError.classList.remove("d-none");
                                      priceError.innerText = "Warning: Negative price entered";
                                      return false;
                                  } else {
                                      priceError.classList.remove("d-none");
                                      priceError.innerText = "Price must be a positive number";
                                      return false;
                                  }
                              }
                          
                              function validateStockInput(input) {
                                  const value = parseFloat(input.value);
                                  const stockError = document.getElementById('stock_error');
                          
                                  if (input.value === "") {
                                      stockError.classList.add("d-none");
                                      stockError.innerText = "";
                                      return false;
                                  }
                          
                                  if (!isNaN(value) && value >= 0) {
                                      stockError.classList.add("d-none");
                                      stockError.innerText = "Stock must be a positive number"; // Clear any previous error message
                                      return true;
                                  } else if (value < 0) {
                                      stockError.classList.remove("d-none");
                                      stockError.innerText = "Warning: Negative stock entered";
                                      return false;
                                  } else {
                                      stockError.classList.remove("d-none");
                                      stockError.innerText = "Stock must be a positive number";
                                      return false;
                                  }
                              }
                          
                              document.addEventListener("DOMContentLoaded", function() {
                                  const priceInput = document.getElementById("price");
                                  const stockInput = document.getElementById("stock");
                          
                                  priceInput.addEventListener("input", function() {
                                      validatePriceInput(priceInput);
                                  });
                          
                                  stockInput.addEventListener("input", function() {
                                      validateStockInput(stockInput);
                                  });
                                })
                                </script>
                           
                            <% if(typeof message !=='undefined' ){ %>
                                <h6><br>
                                    <%= message %>
                                </h6>
                                <% } %>
                        </div>
                    </div>
                </div>

            </div><!--End Row-->



            <script>
                const input = document.querySelector('input[type="file"]');
                const preview = document.getElementById('preview');
              
                input.addEventListener('change', () => {
                  const files = input.files;
                  preview.innerHTML = '';
                  for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    const reader = new FileReader();
                    reader.onload = () => {
                      const image = new Image();
                      image.src = reader.result;
                      image.onload = () => {
                        const MAX_WIDTH = 200;
                        const MAX_HEIGHT = 200;
                        let width = image.width;
                        let height = image.height;
                        if (width > height) {
                          if (width > MAX_WIDTH) {
                            height *= MAX_WIDTH / width;
                            width = MAX_WIDTH;
                          }
                        } else {
                          if (height > MAX_HEIGHT) {
                            width *= MAX_HEIGHT / height;
                            height = MAX_HEIGHT;
                          }
                        }
                        const canvas = document.createElement('canvas');
                        canvas.width = width;
                        canvas.height = height;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(image, 0, 0, width, height);
                        const dataUrl = canvas.toDataURL();
                        const wrapper = document.createElement('div');
                        wrapper.classList.add('image-wrapper');
                        const img = document.createElement('img');
                        img.src = dataUrl;
                        wrapper.appendChild(img);
                        const removeIcon = document.createElement('i');
                        removeIcon.classList.add('fa', 'fa-times');
                        removeIcon.addEventListener('click', () => {
                          wrapper.remove();
                          if (preview.children.length === 0) {
                            preview.classList.remove('has-images');
                          }
                        });
                        wrapper.appendChild(removeIcon);
                        preview.appendChild(wrapper);
                        preview.classList.add('has-images');
                      };
                    };
                    reader.readAsDataURL(file);
                  }
                });
              
                const form = document.getElementById('my-form');
                form.addEventListener('submit', async (event) => {
                  event.preventDefault();
                  const images = [];
                  for (let i = 0; i < preview.children.length; i++) {
                    const child = preview.children[i];
                    if (child.classList.contains('image-wrapper')) {
                      const img = child.querySelector('img');
                      if (img) {
                        const dataUrl = img.src;
                        if (!child.classList.contains('removed')) { // only add images that have not been removed
                          images.push(dataUrl);
                        }
                      }
                    }
                  }
                  try {
                    // save the images to the database
                    const response = await fetch('/api/upload', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({ images })
                    });
                    if (response.ok) {
                      // handle success
                    } else {
                      // handle error
                    }
                  } catch (error) {
                    // handle error
                  }
                });
              </script>
              

          